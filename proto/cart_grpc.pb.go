// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: cart.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	CreateCart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	UpdateCart(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*CartResponse, error)
	DeleteCart(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*CartResponse, error)
	DeleteUserCart(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*CartResponse, error)
	ListCart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCartResponse, error)
	ListByRestaurant(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*ListCartResponse, error)
	ListCartByUser(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*ListCartResponse, error)
	ListCartByRestaurantStream(ctx context.Context, opts ...grpc.CallOption) (CartService_ListCartByRestaurantStreamClient, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) CreateCart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart_service.v1.CartService/CreateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateCart(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart_service.v1.CartService/UpdateCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteCart(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart_service.v1.CartService/DeleteCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteUserCart(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/cart_service.v1.CartService/DeleteUserCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ListCart(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCartResponse, error) {
	out := new(ListCartResponse)
	err := c.cc.Invoke(ctx, "/cart_service.v1.CartService/ListCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ListByRestaurant(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*ListCartResponse, error) {
	out := new(ListCartResponse)
	err := c.cc.Invoke(ctx, "/cart_service.v1.CartService/ListByRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ListCartByUser(ctx context.Context, in *CartRequestItem, opts ...grpc.CallOption) (*ListCartResponse, error) {
	out := new(ListCartResponse)
	err := c.cc.Invoke(ctx, "/cart_service.v1.CartService/ListCartByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ListCartByRestaurantStream(ctx context.Context, opts ...grpc.CallOption) (CartService_ListCartByRestaurantStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CartService_ServiceDesc.Streams[0], "/cart_service.v1.CartService/ListCartByRestaurantStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cartServiceListCartByRestaurantStreamClient{stream}
	return x, nil
}

type CartService_ListCartByRestaurantStreamClient interface {
	Send(*CartRequestItem) error
	Recv() (*ListCartResponse, error)
	grpc.ClientStream
}

type cartServiceListCartByRestaurantStreamClient struct {
	grpc.ClientStream
}

func (x *cartServiceListCartByRestaurantStreamClient) Send(m *CartRequestItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cartServiceListCartByRestaurantStreamClient) Recv() (*ListCartResponse, error) {
	m := new(ListCartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility
type CartServiceServer interface {
	CreateCart(context.Context, *CartRequest) (*CartResponse, error)
	UpdateCart(context.Context, *CartRequestItem) (*CartResponse, error)
	DeleteCart(context.Context, *CartRequestItem) (*CartResponse, error)
	DeleteUserCart(context.Context, *CartRequestItem) (*CartResponse, error)
	ListCart(context.Context, *Empty) (*ListCartResponse, error)
	ListByRestaurant(context.Context, *CartRequestItem) (*ListCartResponse, error)
	ListCartByUser(context.Context, *CartRequestItem) (*ListCartResponse, error)
	ListCartByRestaurantStream(CartService_ListCartByRestaurantStreamServer) error
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (UnimplementedCartServiceServer) CreateCart(context.Context, *CartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCartServiceServer) UpdateCart(context.Context, *CartRequestItem) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCart not implemented")
}
func (UnimplementedCartServiceServer) DeleteCart(context.Context, *CartRequestItem) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedCartServiceServer) DeleteUserCart(context.Context, *CartRequestItem) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCart not implemented")
}
func (UnimplementedCartServiceServer) ListCart(context.Context, *Empty) (*ListCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCart not implemented")
}
func (UnimplementedCartServiceServer) ListByRestaurant(context.Context, *CartRequestItem) (*ListCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByRestaurant not implemented")
}
func (UnimplementedCartServiceServer) ListCartByUser(context.Context, *CartRequestItem) (*ListCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCartByUser not implemented")
}
func (UnimplementedCartServiceServer) ListCartByRestaurantStream(CartService_ListCartByRestaurantStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCartByRestaurantStream not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_service.v1.CartService/CreateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CreateCart(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequestItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_service.v1.CartService/UpdateCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateCart(ctx, req.(*CartRequestItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequestItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_service.v1.CartService/DeleteCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteCart(ctx, req.(*CartRequestItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteUserCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequestItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteUserCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_service.v1.CartService/DeleteUserCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteUserCart(ctx, req.(*CartRequestItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ListCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ListCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_service.v1.CartService/ListCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ListCart(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ListByRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequestItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ListByRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_service.v1.CartService/ListByRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ListByRestaurant(ctx, req.(*CartRequestItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ListCartByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequestItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ListCartByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart_service.v1.CartService/ListCartByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ListCartByUser(ctx, req.(*CartRequestItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ListCartByRestaurantStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CartServiceServer).ListCartByRestaurantStream(&cartServiceListCartByRestaurantStreamServer{stream})
}

type CartService_ListCartByRestaurantStreamServer interface {
	Send(*ListCartResponse) error
	Recv() (*CartRequestItem, error)
	grpc.ServerStream
}

type cartServiceListCartByRestaurantStreamServer struct {
	grpc.ServerStream
}

func (x *cartServiceListCartByRestaurantStreamServer) Send(m *ListCartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cartServiceListCartByRestaurantStreamServer) Recv() (*CartRequestItem, error) {
	m := new(CartRequestItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart_service.v1.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _CartService_CreateCart_Handler,
		},
		{
			MethodName: "UpdateCart",
			Handler:    _CartService_UpdateCart_Handler,
		},
		{
			MethodName: "DeleteCart",
			Handler:    _CartService_DeleteCart_Handler,
		},
		{
			MethodName: "DeleteUserCart",
			Handler:    _CartService_DeleteUserCart_Handler,
		},
		{
			MethodName: "ListCart",
			Handler:    _CartService_ListCart_Handler,
		},
		{
			MethodName: "ListByRestaurant",
			Handler:    _CartService_ListByRestaurant_Handler,
		},
		{
			MethodName: "ListCartByUser",
			Handler:    _CartService_ListCartByUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCartByRestaurantStream",
			Handler:       _CartService_ListCartByRestaurantStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cart.proto",
}
