syntax = "proto3";

option go_package = "order/proto";

package order.v1;
import "google/protobuf/empty.proto";

service Order {
    // NewOrder payload for create order
    rpc CreateNewOrder (NewOrderRequest) returns(NewOrderResponse){}
    rpc FetchOrdersByUser (NewGetUserOrderRequest) returns (stream NewGetUserOrderResponse){}
    rpc DeleteUserOrders (DeleteUserOrdersRequest) returns (DeleteUserOrdersResponse){}
    rpc UpdateOrderStatus (UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse){}
    rpc FetchOderByStatus (GetStatusRequest) returns (stream GetStatusResponse){}
    rpc FetchAllOrders (google.protobuf.Empty) returns (stream AllOrdersResponse){}
    rpc GetDeliveryCode (GetDeliveryCodeRequest) returns (GetDeliveryCodeResponse){}
}

// New Order
message NewOrderRequest {
    string order_id = 1;
    string reference = 2;
    double subtotal = 3;
    double delivery_cost = 4;
    double total_cost = 5;
    string delivery_Type = 6;
    string user_id = 7;
    InNewOrderDeliveryAddress delivery_address = 8;
    repeated InNewOrderItems order_items = 9;
    string paymentMethod = 10;
    string currency = 11;
}

message NewOrderResponse{
    string message = 1;
    string status = 2;
}

message InNewOrderDeliveryAddress{
    string address = 1;
    InNewOrderCoordinates coordinates = 2;
}

message InNewOrderCoordinates{
    double latitude = 1;
    double longitude = 2;
}

message InNewOrderItems {
    string packageID = 1;
    string packageName = 2;
    string description = 3;
    double basePrice = 4;
    string serviceAreaID = 6;
    string image = 7;
    string userID = 8;
    int32 quantity = 9;
    repeated InNewOrderPackageItem items = 10;
    string cartID = 11;
}

message InNewOrderPackageItem {
    string itemID = 1;
    string name = 2;
    string description = 3;
    string itemCategoryID = 4;
    string image = 5;
    string unit = 6;
}

// For getting orders by a user
message NewGetUserOrderRequest {
    string user_id = 1;
}

message NewGetUserOrderResponse {
    OrderProperties data = 1;
    string status = 2;
}

// For deleting a user order
message DeleteUserOrdersRequest {
    string user_id = 1;
}

message DeleteUserOrdersResponse{
    string message = 1;
    string status = 2;
}

// For updating order status
message UpdateOrderStatusRequest {
    string order_id = 1;
    string status = 2;
}

message UpdateOrderStatusResponse {
    string message = 1;
    string status = 2;
}

// For Getting orders based on the status
message GetStatusRequest{
    string user_id = 1;
    string status = 2;
}

message GetStatusResponse{
    OrderProperties data = 1;
    string status = 3;
}

// Response for all orders
message AllOrdersResponse{
    OrderProperties data = 1;
    string status = 2;
}

// For getting delivery code by order_id
message GetDeliveryCodeRequest{
    string order_id = 1;
}

message GetDeliveryCodeResponse{
    int32 delivery_code = 1;
    string status = 2;
}

message OrderProperties{
    string order_id = 1;
    string reference = 2;
    double subtotal = 3;
    double delivery_cost = 4;
    double total_cost = 5;
    string delivery_Type = 6;
    string user_id = 7;
    InNewOrderDeliveryAddress delivery_address = 8;
    repeated InNewOrderItems order_items = 9;
    string status = 10;
    string created_at = 11;
    string updated_at = 12;
    string currency = 13;
    string paymentMethod = 14;
    int32 delivery_code = 15;
    string delivery_time = 16;
}