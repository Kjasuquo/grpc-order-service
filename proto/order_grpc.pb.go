// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: order.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	// NewOrder payload for create order
	CreateNewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error)
	FetchOrdersByUser(ctx context.Context, in *NewGetUserOrderRequest, opts ...grpc.CallOption) (Order_FetchOrdersByUserClient, error)
	DeleteUserOrders(ctx context.Context, in *DeleteUserOrdersRequest, opts ...grpc.CallOption) (*DeleteUserOrdersResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) CreateNewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error) {
	out := new(NewOrderResponse)
	err := c.cc.Invoke(ctx, "/order.v1.Order/CreateNewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) FetchOrdersByUser(ctx context.Context, in *NewGetUserOrderRequest, opts ...grpc.CallOption) (Order_FetchOrdersByUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &Order_ServiceDesc.Streams[0], "/order.v1.Order/FetchOrdersByUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderFetchOrdersByUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Order_FetchOrdersByUserClient interface {
	Recv() (*NewGetUserOrderResponse, error)
	grpc.ClientStream
}

type orderFetchOrdersByUserClient struct {
	grpc.ClientStream
}

func (x *orderFetchOrdersByUserClient) Recv() (*NewGetUserOrderResponse, error) {
	m := new(NewGetUserOrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderClient) DeleteUserOrders(ctx context.Context, in *DeleteUserOrdersRequest, opts ...grpc.CallOption) (*DeleteUserOrdersResponse, error) {
	out := new(DeleteUserOrdersResponse)
	err := c.cc.Invoke(ctx, "/order.v1.Order/DeleteUserOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	out := new(UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, "/order.v1.Order/UpdateOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	// NewOrder payload for create order
	CreateNewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error)
	FetchOrdersByUser(*NewGetUserOrderRequest, Order_FetchOrdersByUserServer) error
	DeleteUserOrders(context.Context, *DeleteUserOrdersRequest) (*DeleteUserOrdersResponse, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) CreateNewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewOrder not implemented")
}
func (UnimplementedOrderServer) FetchOrdersByUser(*NewGetUserOrderRequest, Order_FetchOrdersByUserServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchOrdersByUser not implemented")
}
func (UnimplementedOrderServer) DeleteUserOrders(context.Context, *DeleteUserOrdersRequest) (*DeleteUserOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserOrders not implemented")
}
func (UnimplementedOrderServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_CreateNewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateNewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.v1.Order/CreateNewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateNewOrder(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_FetchOrdersByUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewGetUserOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServer).FetchOrdersByUser(m, &orderFetchOrdersByUserServer{stream})
}

type Order_FetchOrdersByUserServer interface {
	Send(*NewGetUserOrderResponse) error
	grpc.ServerStream
}

type orderFetchOrdersByUserServer struct {
	grpc.ServerStream
}

func (x *orderFetchOrdersByUserServer) Send(m *NewGetUserOrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Order_DeleteUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).DeleteUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.v1.Order/DeleteUserOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).DeleteUserOrders(ctx, req.(*DeleteUserOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.v1.Order/UpdateOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.v1.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewOrder",
			Handler:    _Order_CreateNewOrder_Handler,
		},
		{
			MethodName: "DeleteUserOrders",
			Handler:    _Order_DeleteUserOrders_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _Order_UpdateOrderStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchOrdersByUser",
			Handler:       _Order_FetchOrdersByUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
